<?php
class Currency
{

  private $code;
  private $currencies = array();
  private $db;
  private $session;
  private $config;
  private $language;
  private $request;

  //--------------------------------------------------------------------------

  public function __construct($registry)
  {

    $this->config = $registry->get( 'config' );
    $this->db = $registry->get( 'db' );
    $this->language = $registry->get( 'language' );
    $this->request = $registry->get( 'request' );
    $this->session = $registry->get( 'session' );

    $query = $this->db->query( "SELECT * FROM currency" );

    	foreach ( $query->rows as $result )
    	{
      		$this->currencies[$result['code']] = array(
        		'currency_id'   => $result['currency_id'],
        		'title'         => $result['title'],
        		'symbol_left'   => $result['symbol_left'],
        		'symbol_right'  => $result['symbol_right'],
        		'decimal_place' => $result['decimal_place'],
        		'value'         => $result['value']
      		); 
    	}

		if (isset($this->request->get['currency']) && (array_key_exists($this->request->get['currency'], $this->currencies))) {
			$this->set($this->request->get['currency']);
    	} elseif ((isset($this->session->data['currency'])) && (array_key_exists($this->session->data['currency'], $this->currencies))) {
      		$this->set($this->session->data['currency']);
    	} elseif ((isset($this->request->cookie['currency'])) && (array_key_exists($this->request->cookie['currency'], $this->currencies))) {
      		$this->set($this->request->cookie['currency']);
    	} else {
      		$this->set($this->config->get('config_currency'));
    	}
  }

  //----------------------------------------------------------------------------

	public function getCurrencyByCode($currency)
	{
		$query = $this->db->query("SELECT DISTINCT * FROM currency WHERE code = '" . $this->db->escape($currency) . "'");

		return $query->row;
	}

  //----------------------------------------------------------------------------

	public function getCurrencies() {
		$currency_data = $this->cache->get('currency');

		if (!$currency_data)
		{

			$currency_data = array();

			$query = $this->db->query("SELECT * FROM currency ORDER BY title ASC");

			foreach ($query->rows as $result) {
      			$currency_data[$result['code']] = array(
        			'currency_id'   => $result['currency_id'],
        			'title'         => $result['title'],
        			'code'          => $result['code'],
					'symbol_left'   => $result['symbol_left'],
					'symbol_right'  => $result['symbol_right'],
					'decimal_place' => $result['decimal_place'],
					'value'         => $result['value'],
					'status'        => $result['status'],
					'date_modified' => $result['date_modified']
      			);
    		}

			$this->cache->set('currency', $currency_data);
		}

		return $currency_data;	
	}

    //--------------------------------------------------------------------------

  	public function set($currency) 
  	{
    	$this->code = $currency;

    	if (!isset($this->session->data['currency']) || ($this->session->data['currency'] != $currency)) {
      		$this->session->data['currency'] = $currency;
    	}

    	if (!isset($this->request->cookie['currency']) || ($this->request->cookie['currency'] != $currency)) {
	  		setcookie('currency', $currency, time() + 60 * 60 * 24 * 30, '/', $this->request->server['HTTP_HOST']);
    	}
  	}

    //--------------------------------------------------------------------------

  	public function format($number, $currency = '', $value = '', $format = true) 
  	{
		if ($currency && $this->has($currency)) 
		{
      		$symbol_left   = $this->currencies[$currency]['symbol_left'];
      		$symbol_right  = $this->currencies[$currency]['symbol_right'];
      		$decimal_place = $this->currencies[$currency]['decimal_place'];
    	} else {
      		$symbol_left   = $this->currencies[$this->code]['symbol_left'];
      		$symbol_right  = $this->currencies[$this->code]['symbol_right'];
      		$decimal_place = $this->currencies[$this->code]['decimal_place'];

			$currency = $this->code;
    	}

    	if ($value) 
    	{
      		$value = $value;
    	} else {
      		$value = $this->currencies[$currency]['value'];
    	}

    	if ($value) 
    	{
      		$value = (float)$number * $value;
    	} else {
      		$value = $number;
    	}

    	$string = '';

    	if (($symbol_left) && ($format)) 
    	{
      		$string .= $symbol_left;
    	}

		if ($format) 
		{
			$decimal_point = $this->language->get('decimal_point');
		} else {
			$decimal_point = '.';
		}
		
		if ($format) {
			$thousand_point = $this->language->get('thousand_point');
		} else {
			$thousand_point = '';
		}

    	$string .= number_format(round($value, (int)$decimal_place), (int)$decimal_place, $decimal_point, $thousand_point);

    	if (($symbol_right) && ($format)) 
    	{
      		$string .= $symbol_right;
    	}

    	return $string;
  	}

    //--------------------------------------------------------------------------

  	public function format5($number, $currency = '', $value = '', $format = true) 
  	{
		if ($currency && $this->has($currency)) {
      		$symbol_left   = $this->currencies[$currency]['symbol_left'];
      		$symbol_right  = $this->currencies[$currency]['symbol_right'];
      		$decimal_place = $this->currencies[$currency]['decimal_place'];
    	} else {
      		$symbol_left   = $this->currencies[$this->code]['symbol_left'];
      		$symbol_right  = $this->currencies[$this->code]['symbol_right'];
      		$decimal_place = $this->currencies[$this->code]['decimal_place'];

			$currency = $this->code;
    	}

    	if ($value) {
      		$value = $value;
    	} else {
      		$value = $this->currencies[$currency]['value'];
    	}

    	if ($value) {
      		$value = (float)$number * $value;
    	} else {
      		$value = $number;
    	}

    	$string = '';

    	if (($symbol_left) && ($format)) {
      		$string .= $symbol_left;
    	}

		if ($format) {
			$decimal_point = $this->language->get('decimal_point');
		} else {
			$decimal_point = '.';
		}

		if ($format) {
			$thousand_point = $this->language->get('thousand_point');
		} else {
			$thousand_point = '';
		}

    	$string .= number_format(round($value, 5), 5, $decimal_point, $thousand_point);

    	if (($symbol_right) && ($format)) {
      		$string .= $symbol_right;
    	}

    	return $string;
  	}

    //--------------------------------------------------------------------------

  	public function convert($value, $from, $to) {
		if (isset($this->currencies[$from])) {
			$from = $this->currencies[$from]['value'];
		} else {
			$from = 0;
		}

		if (isset($this->currencies[$to])) {
			$to = $this->currencies[$to]['value'];
		} else {
			$to = 0;
		}

		return $value * ($to / $from);
  	}

    //--------------------------------------------------------------------------

  	public function getId($currency = '') {
		if (!$currency) {
			return $this->currencies[$this->code]['currency_id'];
		} elseif ($currency && isset($this->currencies[$currency])) {
			return $this->currencies[$currency]['currency_id'];
		} else {
			return 0;
		}
  	}

    //--------------------------------------------------------------------------

	public function getSymbolLeft($currency = '') {
		if (!$currency) {
			return $this->currencies[$this->code]['symbol_left'];
		} elseif ($currency && isset($this->currencies[$currency])) {
			return $this->currencies[$currency]['symbol_left'];
		} else {
			return '';
		}
  	}

    //--------------------------------------------------------------------------

	public function getSymbolRight($currency = '') {
		if (!$currency) {
			return $this->currencies[$this->code]['symbol_right'];
		} elseif ($currency && isset($this->currencies[$currency])) {
			return $this->currencies[$currency]['symbol_right'];
		} else {
			return '';
		}
  	}

    //--------------------------------------------------------------------------

	public function getDecimalPlace($currency = '') {
		if (!$currency) {
			return $this->currencies[$this->code]['decimal_place'];
		} elseif ($currency && isset($this->currencies[$currency])) {
			return $this->currencies[$currency]['decimal_place'];
		} else {
			return 0;
		}
  	}

    //--------------------------------------------------------------------------

  	public function getCode()
  	{
    	return $this->code;
  	}

    //--------------------------------------------------------------------------

  	public function getValue($currency = '') {
		if (!$currency) {
			return $this->currencies[$this->code]['value'];
		} elseif ($currency && isset($this->currencies[$currency])) {
			return $this->currencies[$currency]['value'];
		} else {
			return 0;
		}
  	}

    //--------------------------------------------------------------------------

  	public function has($currency)
  	{

    	return isset($this->currencies[$currency]);

  	}

    //----------------------------------------------------------------------------
    // Get currency list
    //----------------------------------------------------------------------------

    public function Get_Currencies()
    {

      // Compose SQL query
      $sql =
        "SELECT " .
          "`currency`.`code` AS code, " .
          "`currency`.`status` AS status, " .
          "`currency`.`symbol_left` AS symbol_left, " .
          "`currency`.`symbol_right` AS symbol_right, " .
          "`currency`.`decimal_place` AS decimal_place, " .
          "`currency`.`date_modified` AS date_modified, " .
          "`currency`.`creation_date` AS creation_date " .
        "FROM " .
          "currency ".
        "WHERE " .
          "currency.status='active'";

      // Perform SQL query
      $query = $this->db->query( $sql );

      // Return properties description
      return ($query->rows);

    }

    //----------------------------------------------------------------------------
    // Get currency description
    //----------------------------------------------------------------------------

    public function Get_Currency_Description( $code='', $language_code='XX' )
    {

      // Compose SQL query
      $sql =
        "SELECT * " .
        "FROM " .
          "currency_description ".
        "WHERE " .
          "currency_description.code='" . $this->db->escape( $code ) . "' AND ".
          "currency_description.language_code='" . $this->db->escape( $language_code ) . "' ";

      // Perform SQL query
      $query = $this->db->query( $sql );

      // Test for currency exists
      if ( $query->num_rows != 1 )
      {

        //------------------------------------------------------------------------
        // ERROR: Currency description not found
        //------------------------------------------------------------------------

        // Set default data
        $data[ 'return_code' ] = false;
        $data[ 'name' ] = '';

      }
      else
      {

        //------------------------------------------------------------------------
        // Currency description found
        //------------------------------------------------------------------------

        // Set currency data
        $data[ 'return_code' ] = true;
        $data[ 'name' ] =  $query->row[ 'name' ];

      }

      // Return currency description
      return ($data);

    }

    
    //----------------------------------------------------------------------------
    // Get currency info
    //----------------------------------------------------------------------------

    public function Get_Currency( $code='', $language_code='XX')
    {

      // Compose SQL query
      $sql =
        "SELECT " .
          "`currency`.`code` AS code, " .
          "`currency`.`status` AS status, " .
          "`currency`.`symbol_left` AS symbol_left, " .
          "`currency`.`symbol_right` AS symbol_right, " .
          "`currency`.`decimal_place` AS decimal_place, " .
          "`currency`.`date_modified` AS date_modified, " .
          "`currency_description`.`name` AS name, " .
          "`currency`.`creation_date` AS creation_date " .
        "FROM " .
          "currency ".
        "LEFT JOIN " .
          "`currency_description` " .
        "ON " .
          "`currency`.`code`=`currency_description`.`code` " .
        "WHERE " .
          "currency.code='" . $this->db->escape( $code ) . "' AND ".
          "currency_description.language_code='" . $this->db->escape( $language_code ) . "' AND ".
          "currency.status='active'";

      // Perform SQL query
      $query = $this->db->query( $sql );

      // Test for currency exists
      if ( $query->num_rows != 1 )
      {

        //------------------------------------------------------------------------
        // ERROR: Currency description not found
        //------------------------------------------------------------------------

        // Set default data
        $data[ 'valid' ] = false;
        $data[ 'code' ] = '';
        $data[ 'status' ] = 'inactive';
        $data[ 'symbol_left' ] = '';
        $data[ 'symbol_right' ] = '';
        $data[ 'decimal_place' ] = '';
        $data[ 'creation_date' ] = '0000-00-00 00:00:00';
        $data[ 'date_modified' ] = '0000-00-00 00:00:00';

      }
      else
      {

        //------------------------------------------------------------------------
        // Currency description found
        //------------------------------------------------------------------------

        // Set currency data
        $data[ 'valid' ] = true;
        $data[ 'code' ] =  $query->row[ 'code' ];
        $data[ 'name' ] =  $query->row[ 'name' ];
        $data[ 'status' ] =  $query->row[ 'status' ];
        $data[ 'symbol_left' ] =  $query->row[ 'symbol_left' ];
        $data[ 'symbol_right' ] =  $query->row[ 'symbol_right' ];
        $data[ 'decimal_place' ] =  $query->row[ 'decimal_place' ];
        $data[ 'date_modified' ] =  $query->row[ 'date_modified' ];
        $data[ 'creation_date' ] =  $query->row[ 'creation_date' ];

      }

      // Return currency description
      return ($data);

    }
}

//------------------------------------------------------------------------------
// End of file
//------------------------------------------------------------------------------
?>