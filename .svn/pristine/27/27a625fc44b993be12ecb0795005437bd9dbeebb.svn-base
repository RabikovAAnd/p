<?php

class ControllerWorkplaceCustomersInteractionsRequestCreate extends Controller
{

  private $error = array();

  public function index()
  {
    // Test for customer GUID present and valid
    if ($this->request->Is_GET_Parameter_GUID('guid') === false) {

      //----------------------------------------------------------------------
      // ERROR: Invalud customer GUID
      //----------------------------------------------------------------------

      // Redirect to error page
      $this->response->Redirect($this->url->link('workplace/customers/error', '', 'SSL'));

    } else {
      // Load language
      $this->messages->Load($this->data, 'workplace', 'customers_interactions_offer_add', 'index', $this->language->Get_Language_Code());

      // Load data models
      $this->load->model('account/address');

      

      // Get addresses linked to customer
      $addresses = $this->model_account_address->Get_Addresses('787BC0170B204EC485BD5B3491AB43AE');

      // Iterate over all adresses
      foreach ($addresses as $result) {

        // Compose address
        $generic_address = array(
          'guid' => $result['guid'],
          'address_href' => $this->url->link('account/address_form', 'guid=' . (int) $result['guid']),
          'country_id' => $this->location->Get_Country_Info($result['country_id'])['name'],
          'zone_id' => $this->location->Get_Country_Zone_Info($result['zone_id'])['name'],
          'postcode' => $result['postcode'],
          'city' => $result['city'],
          'street' => $result['street'],
          'house' => $result['house'],
          'building' => $result['building'],
          'apartment' => $result['apartment'],
          'address_name' => $result['street'] . ' ' . $result['house'] . ' ' . $result['building'] . ' ' . $result['apartment'] . ', ' . $result['postcode'],
        );
        // Add payment address
        $this->data['payment_addresses'][] = $generic_address;
      }

      $supplier_guid = $this->request->Get_GET_Parameter_As_GUID('guid');
      // Get addresses linked to customer
      $addresses = $this->model_account_address->Get_Addresses($supplier_guid);
           // Iterate over all adresses
      foreach ($addresses as $result) {

        // Compose address
        $generic_address = array(
          'guid' => $result['guid'],
          'address_href' => $this->url->link('account/address_form', 'guid=' . (int) $result['guid']),
          'country_id' => $this->location->Get_Country_Info($result['country_id'])['name'],
          'zone_id' => $this->location->Get_Country_Zone_Info($result['zone_id'])['name'],
          'postcode' => $result['postcode'],
          'city' => $result['city'],
          'street' => $result['street'],
          'house' => $result['house'],
          'building' => $result['building'],
          'apartment' => $result['apartment'],
          'address_name' => $result['street'] . ' ' . $result['house'] . ' ' . $result['building'] . ' ' . $result['apartment'] . ', ' . $result['postcode'],
        );
        // Add delivery address
        $this->data['delivery_addresses'][] = $generic_address;
      }

        // Set links
        $this->data['create_button_href'] = $this->url->link('workplace/customers/interactions/request/create/Create', 'supplier_guid=' . $supplier_guid, 'SSL');

        //------------------------------------------------------------------------
        // Set page data
        //------------------------------------------------------------------------

        // Set document properties
        $this->response->setTitle($this->messages->Get_Message('document_title_text'));
        $this->response->setDescription($this->messages->Get_Message('document_description_text'));
        $this->response->setKeywords('');
        $this->response->setRobots('index, follow');

        //  Set page sections
        $this->children = array(
          'common/footer',
          'workplace/menu',
          'common/header'
        );
      }
    }
  

  //----------------------------------------------------------------------------
  // Create new request
  //----------------------------------------------------------------------------
  // Caller: AJAX
  //----------------------------------------------------------------------------


  public function Create()
  {

    // Init json data
    $json = array();

    // Load messages
    $this->messages->Load($this->data, 'workplace', 'customers_interactions_offer_add', 'Create', $this->language->Get_Language_Code());

    // Load data models
    $this->load->model('orders/orders');
    $this->load->model('account/address');

    // Init customer data
    $data = array();

    // Clear request data valid sataus
    $request_data_valid = true;

    //------------------------------------------------------------------------
    // Number
    //------------------------------------------------------------------------

    // Test for parameter exists
    if ($this->request->Is_POST_Parameter_Exists('extern_number') === false) {

      //----------------------------------------------------------------------
      // ERROR: Number not found
      //----------------------------------------------------------------------

      // Set error message text
      $json['error']['extern_number'] = $this->data['workplace_customers_interactions_offer_add_' . 'extern_number' . '_error'];

      // Clear request data valid sataus
      $request_data_valid = false;

    } else {

      //----------------------------------------------------------------------
      // Number parameter found
      //----------------------------------------------------------------------

      $data['extern_number'] = trim($this->request->Get_POST_Parameter_As_String('extern_number'));

    }


    //------------------------------------------------------------------------
    // Supplier GUID
    //------------------------------------------------------------------------

    // Test for parameter exists
    if ($this->request->Is_GET_Parameter_GUID('supplier_guid') === false) {

      //----------------------------------------------------------------------
      // ERROR: Supplier GUID not found
      //----------------------------------------------------------------------

      // Set error message text
      $json['error']['supplier_guid'] = $this->data['workplace_customers_interactions_offer_add_' . 'supplier_guid' . '_error'];

      // Clear request data valid sataus
      $request_data_valid = false;

    } else {

      //----------------------------------------------------------------------
      // Supplier parameter found
      //----------------------------------------------------------------------

      $data['supplier'] = $this->customer->Get_Contact_Information(trim($this->request->Get_GET_Parameter_As_GUID('supplier_guid')));
      
    
      // Test for parameter valid
      if ( $data['supplier']['valid'] === false)
      {

        //----------------------------------------------------------------------
        // ERROR: Supplier not valid
        //----------------------------------------------------------------------

        // Set error message text
        $json['error']['supplier_guid'] = $this->data['workplace_customers_interactions_offer_add_' . 'supplier_guid' . '_error'];

        // Clear request data valid sataus
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Supplier parameter found and valid
        //----------------------------------------------------------------------

      }
    }

    //------------------------------------------------------------------------
    // Payment address GUID
    //------------------------------------------------------------------------

    // Test for parameter exists
    if ($this->request->Is_POST_Parameter_GUID('payment_address') === false) 
    {

      //----------------------------------------------------------------------
      // ERROR: Payment address GUID not found
      //----------------------------------------------------------------------

      // Set error message text
      $json['error']['payment_address'] = $this->data['workplace_customers_interactions_offer_add_' . 'payment_address' . '_error'];

      // Clear request data valid sataus
      $request_data_valid = false;

    }
    else
    {

      $data['payment_address'] = $this->model_account_address->Get_Address(trim($this->request->Get_POST_Parameter_As_GUID('payment_address')));

      // Test for parameter valid
      if ( $data['payment_address']['valid'] === false)
      {

        //----------------------------------------------------------------------
        // ERROR: Payment address GUID not valid
        //----------------------------------------------------------------------

        // Set error message text
        $json['error']['payment_address'] = $this->data['workplace_customers_interactions_offer_add_' . 'payment_address' . '_error'];

        // Clear request data valid sataus
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Payment address GUID parameter found and valid
        //----------------------------------------------------------------------

      }

    }

    //------------------------------------------------------------------------
    // Delivery address GUID
    //------------------------------------------------------------------------

    // Test for parameter exists
    if ($this->request->Is_POST_Parameter_GUID('delivery_address') === false) {

      //----------------------------------------------------------------------
      // ERROR: Delivery address GUID not found
      //----------------------------------------------------------------------

      // Set error message text
      $json['error']['payment_address'] = $this->data['workplace_customers_interactions_offer_add_' . 'delivery_address' . '_error'];

      // Clear request data valid sataus
      $request_data_valid = false;

    } else {

      $data['delivery_address'] = $this->model_account_address->Get_Address(trim($this->request->Get_POST_Parameter_As_GUID('delivery_address')));
      
      // Test for parameter valid
      if ($data['delivery_address']['valid'] === false) {
        //----------------------------------------------------------------------
        // ERROR: Delivery address GUID not valid
        //----------------------------------------------------------------------

        // Set error message text
        $json['error']['delivery_address'] = $this->data['workplace_customers_interactions_offer_add_' . 'delivery_address' . '_error'];

        // Clear request data valid sataus
        $request_data_valid = false;

      } else {
        //----------------------------------------------------------------------
        // Delivery address GUID parameter found and valid
        //----------------------------------------------------------------------

      }

    }

    //------------------------------------------------------------------------
    // Comment
    //------------------------------------------------------------------------

    // Test for parameter exists
    if ($this->request->Is_POST_Parameter_Exists('comment') === false) {

      //----------------------------------------------------------------------
      // ERROR: Comment not found
      //----------------------------------------------------------------------

      // Set error message text
      $json['error']['comment'] = $this->data['workplace_customers_interactions_offer_add_' . 'comment' . '_error'];

      // Clear request data valid sataus
      $request_data_valid = false;
    } else {

      //----------------------------------------------------------------------
      // Comment parameter found
      //----------------------------------------------------------------------

      $data['comment'] = trim($this->request->Get_POST_Parameter_As_String('comment'));

    }



    //------------------------------------------------------------------------
    // Process data
    //------------------------------------------------------------------------

    // Is request data valid
    if ($request_data_valid === false) {

      //------------------------------------------------------------------------
      // ERROR: Parameters not valid
      //------------------------------------------------------------------------

      // Set error code
      $json['return_code'] = false;

    } else {

      //--------------------------------------------------------------------
      // Parameters present and valid
      //--------------------------------------------------------------------

      // Generate order GUID
      $guid = UUID_V4_T1();
      

      $data['customer'] = $this->customer->Get_Contact_Information(trim('787BC0170B204EC485BD5B3491AB43AE'));
      $data['type'] = 'purchase';

      // Create new order
      $this->model_orders_orders->Create_Order($guid, $data, $this->language->Get_Language_Code());

      // Set redirect URL
      $json['redirect_url'] = $this->url->link('workplace/customers/info', 'guid=' . $data['supplier']['guid'], 'SSL');

      // Set success code
      $json['return_code'] = true;

    }

    //    }

    // Encode and send json data
    $this->response->Set_Json_Output($json);

  }


}
//------------------------------------------------------------------------------
// End of file
//------------------------------------------------------------------------------
?>