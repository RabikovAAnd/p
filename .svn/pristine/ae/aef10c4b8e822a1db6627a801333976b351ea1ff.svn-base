<?php
class ControllerWorkplaceCustomersCorporateCreate extends Controller
{

  //----------------------------------------------------------------------------
  // Index method
  //----------------------------------------------------------------------------

  public function index()
  {

    //------------------------------------------------------------------------
    // Customer logged in
    //------------------------------------------------------------------------

    // Load messages
    $this->messages->Load( $this->data, 'workplace', 'add_legal_entity', 'index', $this->language->Get_Language_Code() );

    // Get list of countries
    $this->data[ 'countries' ] = $this->location->Get_Countries( $this->language->Get_Language_Code() );

    // Set links
    $this->data[ 'workplace_add_legal_entity_create_button_href' ] = $this->url->link( 'workplace/customers/corporate/create/create', '', 'SSL' );

    //------------------------------------------------------------------------
    // Render page
    //------------------------------------------------------------------------

    // Set document properties
    $this->response->setTitle( $this->messages->Get_Message( 'document_title_text' ) );
    $this->response->setDescription( $this->messages->Get_Message( 'document_description_text' ) );
    $this->response->setKeywords( '' );
    $this->response->setRobots( 'index, follow' );

    // Set page configuration
    $this->children = array(
      'common/footer',
      'workplace/menu',
      'common/header'
    );

  }

  //----------------------------------------------------------------------------
  // Create new customer
  //----------------------------------------------------------------------------
  // Caller: AJAX
  //----------------------------------------------------------------------------

  public function create()
  {

    // Init json data
    $json = array();

      // Load messages
      $this->messages->Load( $this->data, 'workplace', 'add_legal_entity', 'create', $this->language->Get_Language_Code() );

      // Init customer data
      $customer_data = array();

      // Clear request data valid status
      $request_data_valid = true;

      //------------------------------------------------------------------------
      // Email address
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Exists( 'email' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: First name parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'email' ] = $this->data[ 'workplace_add_legal_entity_email_not_exist_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Email parameter found
        //----------------------------------------------------------------------

        // Store customer data
        $customer_data[ 'email' ] = trim( $this->request->Get_POST_Parameter_As_String( 'email' ) );

        if ( $customer_data[ 'email' ] != '' )
        {

          $mail = new Mail();

          // Test email format
          if ( $mail->Is_Email_Valid( $customer_data[ 'email' ] ) === false )
          {

            //--------------------------------------------------------------------
            // ERROR: Email is invalid
            //--------------------------------------------------------------------

            // Set error message text
            $json[ 'error' ][ 'email' ] = $this->data[ 'workplace_add_legal_entity_' . $this->request->Post_Parameter_Is_Mail( 'email' )[ 'response' ] ];

            // Clear request data valid status
            $request_data_valid = false;

          }
          else
          {

            //--------------------------------------------------------------------
            // Email valid
            //--------------------------------------------------------------------

            // Check for customer already registered
            if ( $this->customer->Is_Exists( $customer_data[ 'email' ] ) === true )
            {

              //------------------------------------------------------------------
              // ERROR: User already registered
              //------------------------------------------------------------------

              // Set error message text
              $json[ 'error' ][ 'email' ] = $this->data[ 'workplace_add_legal_entity_email_exists_error' ];

              // Clear request data valid status
              $request_data_valid = false;

            }
            else
            {

              //------------------------------------------------------------------
              // Customer email not registered
              //------------------------------------------------------------------

            }

          }

        }

      }

      //------------------------------------------------------------------------
      // Company name
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Exists( 'company_name' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Company name parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'company_name' ] = $this->data[ 'workplace_add_legal_entity_company_name_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Company name parameter found
        //----------------------------------------------------------------------

        // Store customer data
        $customer_data[ 'company_name' ] = trim( $this->request->Get_POST_Parameter_As_String( 'company_name' ) );

        // Test company name validity
        if (
          ( $customer_data[ 'company_name' ] == "" ) ||
          ( utf8_strlen( $customer_data[ 'company_name' ] ) > $this->customer->Get_Customer_Company_Name_Maximum_String_Size() )
        )
        {

          //--------------------------------------------------------------------
          // ERROR: Company name invalid
          //--------------------------------------------------------------------

          // Set error message text
          $json[ 'error' ][ 'company_name' ] = $this->data[ 'workplace_add_legal_entity_company_name_error' ];

          // Clear request data valid status
          $request_data_valid = false;

        }
        else
        {

          //--------------------------------------------------------------------
          // Company name valid
          //--------------------------------------------------------------------

        }

      }

      //------------------------------------------------------------------------
      // Short company name
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Exists( 'short_company_name' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Short company name parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'company_short_name' ] = $this->data[ 'workplace_add_legal_entity_short_company_name_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Short company name parameter found
        //----------------------------------------------------------------------

        // Store customer data
        $customer_data[ 'company_short_name' ] = trim( $this->request->Get_POST_Parameter_As_String( 'short_company_name' ) );

        // Test Short company name validity
        if ( utf8_strlen( $customer_data[ 'company_short_name' ] ) > $this->customer->Get_Customer_Company_Short_Name_Maximum_String_Size())
        {

          //--------------------------------------------------------------------
          // ERROR: Short company name invalid
          //--------------------------------------------------------------------

          // Set error message text
          $json[ 'error' ][ 'short_company_name' ] = $this->data[ 'workplace_add_legal_entity_short_company_name_error' ];

          // Clear request data valid status
          $request_data_valid = false;

        }
        else
        {

          //--------------------------------------------------------------------
          // Short company name valid
          //--------------------------------------------------------------------

        }

      }

      //------------------------------------------------------------------------
      // Registration country
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Get_POST_Parameter_As_String( 'registration_country' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Registration country parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'registration_country' ] = $this->data[ 'workplace_add_legal_entity_registration_country_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Registration country parameter found
        //----------------------------------------------------------------------

        if ( $this->request->Get_POST_Parameter_As_String( 'registration_country' ) == '' )
        {

          //--------------------------------------------------------------------
          // ERROR: Registration country parameter empty
          //--------------------------------------------------------------------

          // Set error message text
          $json[ 'error' ][ 'registration_country' ] = $this->data[ 'workplace_add_legal_entity_registration_country_error' ];

          // Clear request data valid status
          $request_data_valid = false;

        }
        else
        {

          //----------------------------------------------------------------------
          // Registration country parameter found
          //----------------------------------------------------------------------

          if( $this->location->Is_Country_ISO2_Code_Exists( $this->request->Get_POST_Parameter_As_String( 'registration_country' ) ) === false )
          {

            //----------------------------------------------------------------------
            // ERROR: ISO2 Code parameter not found
            //----------------------------------------------------------------------

            // Set error message text
            $json[ 'error' ][ 'registration_country' ] = $this->data[ 'workplace_add_legal_entity_registration_country_error' ];

            // Clear request data valid status
            $request_data_valid = false;

          }

          // Store customer data
          $customer_data[ 'registration_country' ] = $this->request->Get_POST_Parameter_As_String( 'registration_country' );

        }

      }

      //------------------------------------------------------------------------
      // First name
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Exists( 'firstname' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: First name parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'firstname' ] = $this->data[ 'workplace_add_legal_entity_firstname_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // First name parameter found
        //----------------------------------------------------------------------

        // Store customer data
        $customer_data[ 'firstname' ] = trim( $this->request->Get_POST_Parameter_As_String( 'firstname' ) );

        // Test forst name validity
        if ( utf8_strlen( $customer_data[ 'firstname' ] ) > $this->customer->Get_Customer_Firstname_Maximum_String_Size() )
        {

          //--------------------------------------------------------------------
          // ERROR: First name invalid
          //--------------------------------------------------------------------

          // Set error message text
          $json[ 'error' ][ 'firstname' ] = $this->data[ 'workplace_add_legal_entity_firstname_error' ];

          // Clear request data valid status
          $request_data_valid = false;

        }
        else
        {

          //--------------------------------------------------------------------
          // First name valid
          //--------------------------------------------------------------------

        }

      }

      //------------------------------------------------------------------------
      // Last name
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Exists( 'lastname' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Last name parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'lastname' ] = $this->data[ 'workplace_add_legal_entity_lastname_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Last name parameter found
        //----------------------------------------------------------------------

        // Store customer data
        $customer_data[ 'lastname' ] = trim( $this->request->Get_POST_Parameter_As_String( 'lastname' ) );

        // Test last name validity
        if ( utf8_strlen( $customer_data[ 'lastname' ] ) > $this->customer->Get_Customer_Lastname_Maximum_String_Size() )
        {

          //--------------------------------------------------------------------
          // ERROR: Last name invalid
          //--------------------------------------------------------------------

          // Set error message text
          $json[ 'error' ][ 'lastname' ] = $this->data[ 'workplace_add_legal_entity_lastname_error' ];

          // Clear request data valid status
          $request_data_valid = false;

        }
        else
        {

          //--------------------------------------------------------------------
          // Last name valid
          //--------------------------------------------------------------------

        }

      }

      //------------------------------------------------------------------------
      // Middle name
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Exists( 'middlename' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Middle name parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'middlename' ] = $this->data[ 'workplace_add_legal_entity_middlename_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Middle name parameter found
        //----------------------------------------------------------------------

        // Store customer data
        $customer_data[ 'middlename' ] = trim( $this->request->Get_POST_Parameter_As_String( 'middlename' ) );

        // Test middle name validity
        if ( utf8_strlen( $customer_data[ 'middlename' ] ) > $this->customer->Get_Customer_Middlename_Maximum_String_Size() )
        {

          //--------------------------------------------------------------------
          // ERROR: Middle name invalid
          //--------------------------------------------------------------------

          // Set error message text
          $json[ 'error' ][ 'middlename' ] = $this->data[ 'workplace_add_legal_entity_middlename_error' ];

          // Clear request data valid status
          $request_data_valid = false;

        }
        else
        {

          //--------------------------------------------------------------------
          // Middle name valid
          //--------------------------------------------------------------------

        }

      }

      //------------------------------------------------------------------------
      // Consumer role
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Boolean( 'consumer_role' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Consumer role parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'consumer_role' ] = $this->data[ 'workplace_add_legal_entity_consumer_role_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Consumer role parameter found
        //----------------------------------------------------------------------

        // Store customer role
        $customer_data[ 'consumer_role' ] = $this->request->Get_POST_Parameter_As_Boolean( 'consumer_role' );

      }

      //------------------------------------------------------------------------
      // Manufacturer role
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Boolean( 'manufacturer_role' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Manufacturer role parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'manufacturer_role' ] = $this->data[ 'workplace_add_legal_entity_manufacturer_role_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Manufacturer role parameter found
        //----------------------------------------------------------------------

        // Store manufacturer role
        $customer_data[ 'manufacturer_role' ] = $this->request->Get_POST_Parameter_As_Boolean( 'manufacturer_role' );

      }

      //------------------------------------------------------------------------
      // Supplier role
      //------------------------------------------------------------------------

      // Test for parameter exists
      if( $this->request->Is_POST_Parameter_Boolean( 'supplier_role' ) === false )
      {

        //----------------------------------------------------------------------
        // ERROR: Supplier role parameter not found
        //----------------------------------------------------------------------

        // Set error message text
        $json[ 'error' ][ 'supplier_role' ] = $this->data[ 'workplace_add_legal_entity_supplier_role_error' ];

        // Clear request data valid status
        $request_data_valid = false;

      }
      else
      {

        //----------------------------------------------------------------------
        // Supplier role parameter found
        //----------------------------------------------------------------------

        // Store manufacturer role
        $customer_data[ 'supplier_role' ] = $this->request->Get_POST_Parameter_As_Boolean( 'supplier_role' );

      }

      //------------------------------------------------------------------------
      // Process data
      //------------------------------------------------------------------------

      // Is request data valid
      if ( $request_data_valid === false )
      {

        //------------------------------------------------------------------------
        // ERROR: Parameters not valid
        //------------------------------------------------------------------------

        // Set error code
        $json[ 'return_code' ] = false;

      }
      else
      {

        //--------------------------------------------------------------------
        // Parameters present and valid
        //--------------------------------------------------------------------

        $customer_data[ 'newsletter' ] = false;
        $customer_data[ 'legal_entity' ] = true;

        // Generate customer GUID
        $guid = UUID_V4_T1();

        // Create new customer
        $this->customer->Create( $guid, $customer_data );

        // Set redirect URL
        $json[ 'redirect_url' ]= $this->url->link( 'workplace/customers/info', 'guid=' . $guid, 'SSL' );

        // Set success code
        $json[ 'return_code' ] = true;

      }

    // Encode and send json data
    $this->response->Set_Json_Output( $json );

  }

}
//------------------------------------------------------------------------------
// End of file
//------------------------------------------------------------------------------
?>